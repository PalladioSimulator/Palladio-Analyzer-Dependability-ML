/*
 * Two modeltypes are declared. The http NS URIs correspond to those used to register the 
 * Ecore models in the environment. Alternatively, a workspace metamodel may be used 
 * in conjunction with mappings defined in the project properties.
 */
modeltype RUNTIMEMEASUREMENT uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.2';
modeltype PCM_USAGE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.2';
modeltype PCM_FEATURE_CONF uses 'http://sdq.ipd.uka.de/FeatureConfig/2.0';
modeltype PCM_FEATURE_MOD uses 'http://sdq.ipd.uka.de/FeatureModel/2.0';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype PCM_ENTITY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.2';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';

/*
 * The transformation simply exchanges the ML model from default to more robust but non-performant.
 */
transformation SwitchToRobustMLModel(inout pcmSystem : PCM_SYS, in pcmRepo : PCM_REP) {
							
							
	property mlModelAssemblyId : String = "_vH-OANDcEeqWne3bdagE9g";
	property robustMlModelComponentId : String = "_hDRrsOBoEeq7Govxf64fxQ";
	property mlAssemblyConnectorId : String = "_WLAugPJ4EeqofrndBLNacw";

	/**
	 * The main transformation.
	 * This is the entry point to the overall transformation.
	 */
	main() {
	
		log('Simulated experience: switch to robust ml model.');
		
		var robustMLModel : BasicComponent := findRobustMLModelComponent();
		adjustAssemblyConnector(robustMLModel);
		switchComponentOfAssembly(robustMLModel);

	}
	
	helper findRobustMLModelComponent() : BasicComponent {
		var mlModelComponent : BasicComponent := null;
		pcmRepo.rootObjects()[Repository].allSubobjects()[BasicComponent]->forEach(component) {
			if component.id = robustMlModelComponentId then {
				log('Found ML model component: ' + component.entityName);
				
				mlModelComponent := component;
				break;
			} 
			endif
		};
		
		assert fatal(mlModelComponent != null) with log('The ML model component could not be found.');
		
		return mlModelComponent;
	}
	
	/**
	 * Adjusts the roles of the corresponding assembly connector.
	 */
	helper adjustAssemblyConnector(robustMLModel : BasicComponent) {
		var adjustedSuccessfully : Boolean = false;
		
		pcmSystem.rootObjects()[System].allSubobjects()[AssemblyConnector]->forEach(connector) {
			if connector.id = mlAssemblyConnectorId then {
				log('Found target assembly connector: ' + connector.entityName);
				
				connector.providedRole_AssemblyConnector := robustMLModel.providedRoles_InterfaceProvidingEntity->asSequence()->first().oclAsType(OperationProvidedRole);
				
				adjustedSuccessfully := true;
				break;
			} 
			endif
		};
		
		assert fatal(adjustedSuccessfully) with log('The ML model assembly connector could not be found.');
	}
	
	/**
	 * Exchange ML model component.
	 */
	helper switchComponentOfAssembly(robustMLModel : BasicComponent) {
		var exchangedSuccessfully : Boolean = false;	
	
		pcmSystem.rootObjects()[System].allSubobjects()[AssemblyContext]->forEach(assembly) {
			if assembly.id = mlModelAssemblyId then {
				log('Found target assembly: ' + assembly.entityName);
				
				assembly.encapsulatedComponent__AssemblyContext := robustMLModel;
				
				exchangedSuccessfully := true;
				break;
			} 
			endif
		};
		
		assert fatal(exchangedSuccessfully) with log('The ML model assembly could not be found.');
	}
	
}